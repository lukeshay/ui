import{a as P,r as $,g as c,_ as v}from"./index-d7cf9877.js";const f="Progress",d=100,[_,L]=P(f),[E,N]=_(f),p=$.forwardRef((e,a)=>{const{__scopeProgress:t,value:r,max:o,getValueLabel:s=h,...g}=e,u=i(o)?o:d,n=m(r,u)?r:null,b=l(n)?s(n,u):void 0;return $.createElement(E,{scope:t,value:n,max:u},$.createElement(c.div,v({"aria-valuemax":u,"aria-valuemin":0,"aria-valuenow":l(n)?n:void 0,"aria-valuetext":b,role:"progressbar","data-state":x(n,u),"data-value":n??void 0,"data-max":u},g,{ref:a})))});p.propTypes={max(e,a,t){const r=e[a],o=String(r);return r&&!i(r)?new Error(M(o,t)):null},value(e,a,t){const r=e[a],o=String(r),s=i(e.max)?e.max:d;return r!=null&&!m(r,s)?new Error(w(o,t)):null}};const V="ProgressIndicator",I=$.forwardRef((e,a)=>{var t;const{__scopeProgress:r,...o}=e,s=N(V,r);return $.createElement(c.div,v({"data-state":x(s.value,s.max),"data-value":(t=s.value)!==null&&t!==void 0?t:void 0,"data-max":s.max},o,{ref:a}))});function h(e,a){return`${Math.round(e/a*100)}%`}function x(e,a){return e==null?"indeterminate":e===a?"complete":"loading"}function l(e){return typeof e=="number"}function i(e){return l(e)&&!isNaN(e)&&e>0}function m(e,a){return l(e)&&!isNaN(e)&&e<=a&&e>=0}function M(e,a){return`Invalid prop \`max\` of value \`${e}\` supplied to \`${a}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${d}\`.`}function w(e,a){return`Invalid prop \`value\` of value \`${e}\` supplied to \`${a}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${d} if no \`max\` prop is set)
  - \`null\` if the progress is indeterminate.

Defaulting to \`null\`.`}const R=p,S=I;export{R as $,S as a};
